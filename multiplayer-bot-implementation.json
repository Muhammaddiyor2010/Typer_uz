{
  "project": "Typing Test Multiplayer Bot Implementation",
  "version": "1.0.0",
  "description": "Complete implementation guide for adding real-time multiplayer functionality to the typing test application",
  "implementation_options": {
    "option_1": {
      "name": "Firebase Integration (Recommended)",
      "difficulty": "Easy",
      "cost": "Free tier available",
      "setup_time": "15 minutes",
      "files_to_create": [
        "firebase-config.js",
        "firebase.json"
      ],
      "code": {
        "firebase_config": {
          "file": "firebase-config.js",
          "content": "// Firebase Configuration\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, set, onValue, push, remove } from 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key-here',\n  authDomain: 'your-project.firebaseapp.com',\n  databaseURL: 'https://your-project-default-rtdb.firebaseio.com/',\n  projectId: 'your-project-id',\n  storageBucket: 'your-project.appspot.com',\n  messagingSenderId: '123456789',\n  appId: 'your-app-id'\n};\n\nconst app = initializeApp(firebaseConfig);\nconst database = getDatabase(app);\n\nexport { database, ref, set, onValue, push, remove };"
        },
        "html_integration": {
          "file": "index.html additions",
          "content": "<!-- Add before closing </body> tag -->\n<script type=\"module\">\n  import { database, ref, set, onValue, push, remove } from './firebase-config.js';\n  \n  // Multiplayer functions\n  window.multiplayer = {\n    createRoom: async (roomCode, playerData) => {\n      try {\n        await set(ref(database, 'rooms/' + roomCode), {\n          players: [playerData],\n          settings: {\n            difficulty: 'medium',\n            duration: 60,\n            maxPlayers: 4\n          },\n          createdAt: Date.now(),\n          status: 'waiting'\n        });\n        return true;\n      } catch (error) {\n        console.error('Error creating room:', error);\n        return false;\n      }\n    },\n    \n    joinRoom: async (roomCode, playerData) => {\n      try {\n        const roomRef = ref(database, 'rooms/' + roomCode);\n        const snapshot = await onValue(roomRef, (snapshot) => {\n          const room = snapshot.val();\n          if (room && room.players.length < room.settings.maxPlayers) {\n            const updatedPlayers = [...room.players, playerData];\n            set(roomRef, { ...room, players: updatedPlayers });\n            return true;\n          }\n          return false;\n        });\n      } catch (error) {\n        console.error('Error joining room:', error);\n        return false;\n      }\n    },\n    \n    updatePlayerStatus: async (roomCode, playerId, isReady) => {\n      try {\n        const roomRef = ref(database, 'rooms/' + roomCode);\n        const snapshot = await onValue(roomRef, (snapshot) => {\n          const room = snapshot.val();\n          if (room) {\n            const updatedPlayers = room.players.map(player => \n              player.id === playerId ? { ...player, isReady } : player\n            );\n            set(roomRef, { ...room, players: updatedPlayers });\n          }\n        });\n      } catch (error) {\n        console.error('Error updating player status:', error);\n      }\n    },\n    \n    listenToRoom: (roomCode, callback) => {\n      const roomRef = ref(database, 'rooms/' + roomCode);\n      return onValue(roomRef, (snapshot) => {\n        const room = snapshot.val();\n        if (room) {\n          callback(room);\n        }\n      });\n    },\n    \n    leaveRoom: async (roomCode, playerId) => {\n      try {\n        const roomRef = ref(database, 'rooms/' + roomCode);\n        const snapshot = await onValue(roomRef, (snapshot) => {\n          const room = snapshot.val();\n          if (room) {\n            const updatedPlayers = room.players.filter(player => player.id !== playerId);\n            if (updatedPlayers.length === 0) {\n              remove(roomRef);\n            } else {\n              set(roomRef, { ...room, players: updatedPlayers });\n            }\n          }\n        });\n      } catch (error) {\n        console.error('Error leaving room:', error);\n      }\n    }\n  };\n</script>"
        }
      },
      "setup_instructions": [
        "1. Go to https://console.firebase.google.com/",
        "2. Create a new project",
        "3. Enable Realtime Database",
        "4. Copy the configuration object",
        "5. Replace the config values in firebase-config.js",
        "6. Add the HTML integration code to your index.html",
        "7. Update your Vue.js methods to use window.multiplayer functions"
      ]
    },
    "option_2": {
      "name": "Socket.io Server",
      "difficulty": "Medium",
      "cost": "Free hosting available",
      "setup_time": "30 minutes",
      "files_to_create": [
        "server.js",
        "package.json",
        "client-socket.js"
      ],
      "code": {
        "package_json": {
          "file": "package.json",
          "content": "{\n  \"name\": \"typer-multiplayer-server\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Multiplayer server for typing test\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"socket.io\": \"^4.7.2\",\n    \"cors\": \"^2.8.5\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.1\"\n  }\n}"
        },
        "server_js": {
          "file": "server.js",
          "content": "const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\napp.use(cors());\napp.use(express.json());\n\n// Store rooms in memory (use database in production)\nconst rooms = new Map();\n\n// Generate room code\nfunction generateRoomCode() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\nio.on('connection', (socket) => {\n  console.log('User connected:', socket.id);\n  \n  // Create room\n  socket.on('create-room', (data) => {\n    const roomCode = generateRoomCode();\n    const room = {\n      code: roomCode,\n      players: [{\n        id: socket.id,\n        name: data.playerName,\n        isReady: false\n      }],\n      settings: data.settings || {\n        difficulty: 'medium',\n        duration: 60,\n        maxPlayers: 4\n      },\n      status: 'waiting',\n      createdAt: Date.now()\n    };\n    \n    rooms.set(roomCode, room);\n    socket.join(roomCode);\n    socket.emit('room-created', { roomCode, room });\n    console.log('Room created:', roomCode);\n  });\n  \n  // Join room\n  socket.on('join-room', (data) => {\n    const { roomCode, playerName } = data;\n    const room = rooms.get(roomCode);\n    \n    if (!room) {\n      socket.emit('room-error', { message: 'Room not found' });\n      return;\n    }\n    \n    if (room.players.length >= room.settings.maxPlayers) {\n      socket.emit('room-error', { message: 'Room is full' });\n      return;\n    }\n    \n    const player = {\n      id: socket.id,\n      name: playerName,\n      isReady: false\n    };\n    \n    room.players.push(player);\n    socket.join(roomCode);\n    \n    // Notify all players in room\n    io.to(roomCode).emit('player-joined', { player, room });\n    console.log('Player joined room:', roomCode, playerName);\n  });\n  \n  // Update player ready status\n  socket.on('update-ready', (data) => {\n    const { roomCode, isReady } = data;\n    const room = rooms.get(roomCode);\n    \n    if (room) {\n      const player = room.players.find(p => p.id === socket.id);\n      if (player) {\n        player.isReady = isReady;\n        io.to(roomCode).emit('player-ready-updated', { player, room });\n      }\n    }\n  });\n  \n  // Update room settings\n  socket.on('update-settings', (data) => {\n    const { roomCode, settings } = data;\n    const room = rooms.get(roomCode);\n    \n    if (room) {\n      room.settings = { ...room.settings, ...settings };\n      io.to(roomCode).emit('settings-updated', { settings: room.settings, room });\n    }\n  });\n  \n  // Start game\n  socket.on('start-game', (data) => {\n    const { roomCode } = data;\n    const room = rooms.get(roomCode);\n    \n    if (room && room.players.length >= 2) {\n      room.status = 'playing';\n      io.to(roomCode).emit('game-started', { room });\n    }\n  });\n  \n  // Player typing progress\n  socket.on('typing-progress', (data) => {\n    const { roomCode, progress } = data;\n    socket.to(roomCode).emit('player-progress', {\n      playerId: socket.id,\n      progress\n    });\n  });\n  \n  // Disconnect\n  socket.on('disconnect', () => {\n    console.log('User disconnected:', socket.id);\n    \n    // Remove player from all rooms\n    for (const [roomCode, room] of rooms.entries()) {\n      const playerIndex = room.players.findIndex(p => p.id === socket.id);\n      if (playerIndex !== -1) {\n        room.players.splice(playerIndex, 1);\n        \n        if (room.players.length === 0) {\n          rooms.delete(roomCode);\n        } else {\n          io.to(roomCode).emit('player-left', { room });\n        }\n        break;\n      }\n    }\n  });\n});\n\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});"
        },
        "client_integration": {
          "file": "client-socket.js",
          "content": "// Add to your index.html\n<script src=\"https://cdn.socket.io/4.7.2/socket.io.min.js\"></script>\n<script>\n  const socket = io('your-server-url');\n  \n  // Multiplayer functions\n  window.multiplayer = {\n    createRoom: (playerName, settings) => {\n      socket.emit('create-room', { playerName, settings });\n    },\n    \n    joinRoom: (roomCode, playerName) => {\n      socket.emit('join-room', { roomCode, playerName });\n    },\n    \n    updateReady: (roomCode, isReady) => {\n      socket.emit('update-ready', { roomCode, isReady });\n    },\n    \n    updateSettings: (roomCode, settings) => {\n      socket.emit('update-settings', { roomCode, settings });\n    },\n    \n    startGame: (roomCode) => {\n      socket.emit('start-game', { roomCode });\n    },\n    \n    sendTypingProgress: (roomCode, progress) => {\n      socket.emit('typing-progress', { roomCode, progress });\n    }\n  };\n  \n  // Socket event listeners\n  socket.on('room-created', (data) => {\n    console.log('Room created:', data.roomCode);\n    // Update your Vue.js app\n  });\n  \n  socket.on('player-joined', (data) => {\n    console.log('Player joined:', data.player);\n    // Update player list in Vue.js\n  });\n  \n  socket.on('player-ready-updated', (data) => {\n    console.log('Player ready status updated:', data.player);\n    // Update ready status in Vue.js\n  });\n  \n  socket.on('settings-updated', (data) => {\n    console.log('Settings updated:', data.settings);\n    // Update settings in Vue.js\n  });\n  \n  socket.on('game-started', (data) => {\n    console.log('Game started:', data.room);\n    // Start the typing test\n  });\n  \n  socket.on('player-progress', (data) => {\n    console.log('Player progress:', data);\n    // Update progress display\n  });\n  \n  socket.on('room-error', (data) => {\n    console.error('Room error:', data.message);\n    // Show error to user\n  });\n</script>"
        }
      },
      "setup_instructions": [
        "1. Create package.json with the provided content",
        "2. Run: npm install",
        "3. Create server.js with the provided code",
        "4. Run: npm start",
        "5. Deploy to Railway, Render, or Heroku",
        "6. Add client integration to your index.html",
        "7. Update your Vue.js methods to use socket events"
      ]
    },
    "option_3": {
      "name": "Supabase Integration",
      "difficulty": "Easy",
      "cost": "Free tier: 50k MAU",
      "setup_time": "20 minutes",
      "files_to_create": [
        "supabase-config.js"
      ],
      "code": {
        "supabase_config": {
          "file": "supabase-config.js",
          "content": "import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = 'your-supabase-url'\nconst supabaseKey = 'your-supabase-anon-key'\nconst supabase = createClient(supabaseUrl, supabaseKey)\n\nexport { supabase }"
        },
        "html_integration": {
          "file": "index.html additions",
          "content": "<!-- Add before closing </body> tag -->\n<script type=\"module\">\n  import { supabase } from './supabase-config.js';\n  \n  // Multiplayer functions\n  window.multiplayer = {\n    createRoom: async (roomCode, playerData) => {\n      const { data, error } = await supabase\n        .from('rooms')\n        .insert([{\n          room_code: roomCode,\n          players: [playerData],\n          settings: {\n            difficulty: 'medium',\n            duration: 60,\n            max_players: 4\n          },\n          status: 'waiting',\n          created_at: new Date().toISOString()\n        }]);\n      \n      if (error) {\n        console.error('Error creating room:', error);\n        return false;\n      }\n      return true;\n    },\n    \n    joinRoom: async (roomCode, playerData) => {\n      const { data: room, error } = await supabase\n        .from('rooms')\n        .select('*')\n        .eq('room_code', roomCode)\n        .single();\n      \n      if (error || !room) {\n        console.error('Room not found:', error);\n        return false;\n      }\n      \n      if (room.players.length >= room.settings.max_players) {\n        console.error('Room is full');\n        return false;\n      }\n      \n      const updatedPlayers = [...room.players, playerData];\n      \n      const { error: updateError } = await supabase\n        .from('rooms')\n        .update({ players: updatedPlayers })\n        .eq('room_code', roomCode);\n      \n      if (updateError) {\n        console.error('Error joining room:', updateError);\n        return false;\n      }\n      \n      return true;\n    },\n    \n    listenToRoom: (roomCode, callback) => {\n      return supabase\n        .channel('room-changes')\n        .on('postgres_changes', {\n          event: '*',\n          schema: 'public',\n          table: 'rooms',\n          filter: `room_code=eq.${roomCode}`\n        }, (payload) => {\n          callback(payload.new);\n        })\n        .subscribe();\n    }\n  };\n</script>"
        }
      },
      "setup_instructions": [
        "1. Go to https://supabase.com/",
        "2. Create a new project",
        "3. Create a 'rooms' table with columns: room_code, players, settings, status, created_at",
        "4. Enable Row Level Security",
        "5. Copy the configuration values",
        "6. Add the integration code to your index.html"
      ]
    }
  },
  "vue_js_updates": {
    "description": "Updates needed in your Vue.js methods to integrate with multiplayer",
    "methods_to_update": [
      "createRoom",
      "joinRoom", 
      "toggleReady",
      "updateRoomSettings",
      "leaveRoom"
    ],
    "example_updates": {
      "createRoom_method": "createRoom() {\n  const playerData = {\n    id: 1,\n    name: this.playerName,\n    isReady: false\n  };\n  \n  const settings = {\n    difficulty: this.selectedDifficulty,\n    duration: parseInt(this.selectedTime),\n    maxPlayers: parseInt(this.maxPlayers)\n  };\n  \n  // Use Firebase\n  window.multiplayer.createRoom(this.currentRoomCode, playerData, settings);\n  \n  // Or use Socket.io\n  // window.multiplayer.createRoom(this.playerName, settings);\n  \n  this.inLobby = true;\n  this.players = [playerData];\n  this.isReady = false;\n  this.showJoinRoom = false;\n}",
      "joinRoom_method": "joinRoom() {\n  if (this.roomCode.trim()) {\n    const playerData = {\n      id: 1,\n      name: this.playerName,\n      isReady: false\n    };\n    \n    // Use Firebase\n    window.multiplayer.joinRoom(this.roomCode.trim().toUpperCase(), playerData);\n    \n    // Or use Socket.io\n    // window.multiplayer.joinRoom(this.roomCode.trim().toUpperCase(), this.playerName);\n    \n    this.currentRoomCode = this.roomCode.trim().toUpperCase();\n    this.inLobby = true;\n    this.players = [playerData];\n    this.isReady = false;\n    this.showJoinRoom = false;\n    this.roomCode = '';\n  }\n}",
      "toggleReady_method": "toggleReady() {\n  this.isReady = !this.isReady;\n  \n  // Update player status in the list\n  const playerIndex = this.players.findIndex(p => p.id === 1);\n  if (playerIndex !== -1) {\n    this.players[playerIndex].isReady = this.isReady;\n  }\n  \n  // Send to server\n  window.multiplayer.updateReady(this.currentRoomCode, this.isReady);\n}",
      "updateRoomSettings_method": "updateRoomSettings() {\n  this.timeLeft = parseInt(this.selectedTime);\n  this.generateRandomText();\n  \n  if (this.testStarted) {\n    this.resetTest();\n  }\n  \n  // Send settings to server\n  const settings = {\n    difficulty: this.selectedDifficulty,\n    duration: parseInt(this.selectedTime),\n    maxPlayers: parseInt(this.maxPlayers)\n  };\n  \n  window.multiplayer.updateSettings(this.currentRoomCode, settings);\n}"
    }
  },
  "deployment_options": {
    "firebase": {
      "steps": [
        "1. Install Firebase CLI: npm install -g firebase-tools",
        "2. Login: firebase login",
        "3. Init: firebase init",
        "4. Deploy: firebase deploy"
      ],
      "url": "https://console.firebase.google.com/"
    },
    "socket_io_hosting": {
      "railway": {
        "steps": [
          "1. Go to https://railway.app/",
          "2. Connect GitHub repository",
          "3. Deploy automatically",
          "4. Get deployment URL"
        ],
        "url": "https://railway.app/"
      },
      "render": {
        "steps": [
          "1. Go to https://render.com/",
          "2. Create new Web Service",
          "3. Connect repository",
          "4. Deploy"
        ],
        "url": "https://render.com/"
      }
    },
    "supabase": {
      "steps": [
        "1. Go to https://supabase.com/",
        "2. Create project",
        "3. Set up database",
        "4. Get API keys"
      ],
      "url": "https://supabase.com/"
    }
  },
  "recommendations": {
    "for_beginners": "Firebase - Easiest to set up, no server management",
    "for_developers": "Socket.io - Full control, more features",
    "for_production": "Supabase - Scalable, PostgreSQL backend",
    "cost_effective": "Firebase free tier is generous for small projects"
  },
  "next_steps": [
    "1. Choose your preferred option (Firebase recommended)",
    "2. Follow the setup instructions",
    "3. Update your Vue.js methods",
    "4. Test the multiplayer functionality",
    "5. Deploy to production"
  ],
  "support": {
    "firebase_docs": "https://firebase.google.com/docs",
    "socket_io_docs": "https://socket.io/docs/",
    "supabase_docs": "https://supabase.com/docs",
    "vue_js_docs": "https://vuejs.org/guide/"
  }
}

